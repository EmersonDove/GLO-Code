//
//  main.cpp
//  Cpp Workspace
//
//  Created by Emerson on 7/19/19.
//  Copyright Â© 2019 Emerson. All rights reserved.
//

#include <iostream>
#include "Filters.cpp"
#include <vector>

using namespace std;
int main() {
    double data []= {0.003,0.003,0.0,0.0,0.003,0.003,-0.004,0.003,0.0,0.0,0.008,0.0,0.0,0.0,-0.003,-0.003,-0.003,0.004,0.004,0.0,0.0,0.0,0.0,0.0,0.005,0.001,0.001,-0.002,-0.002,-0.002,-0.002,-0.002,-0.006,-0.01,-0.001,-0.001,-0.001,-0.009000000000000001,-0.009000000000000001,-0.005,-0.009000000000000001,-0.001,-0.005,-0.005,-0.001,-0.005,-0.005,-0.001,-0.005,-0.005,-0.005,-0.009000000000000001,-0.005,-0.005,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.005,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.009000000000000001,-0.005,-0.009000000000000001,-0.005,-0.005,-0.005,-0.005,-0.009000000000000001,-0.005,-0.005,-0.009000000000000001,-0.009000000000000001,-0.001,-0.009000000000000001,-0.009000000000000001,-0.001,-0.001,-0.001,0.002,-0.001,-0.001,0.002,-0.001,0.002,-0.001,0.002,-0.005,-0.005,0.002,-0.001,0.011000000000000001,0.006,0.015,0.006,0.015,0.015,-0.001,-0.001,0.002,0.006,0.006,0.006,0.01,0.006,0.006,0.01,0.01,0.01,0.01,0.01,0.001,0.005,0.001,0.005,0.005,0.001,0.001,0.001,0.001,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.005,0.009000000000000001,0.009000000000000001,0.005,0.009000000000000001,0.005,0.009000000000000001,0.005,0.005,0.005,0.005,0.009000000000000001,0.009000000000000001,0.009000000000000001,0.009000000000000001,0.009000000000000001,0.009000000000000001,0.005,0.005,-0.011000000000000001,0.005,0.005,-0.002,0.001,0.001,0.001,0.001,-0.006,-0.006,-0.002,-0.002,-0.002,-0.006,-0.006,-0.006,-0.013999999999999999,-0.013999999999999999,-0.006,-0.013999999999999999,-0.013999999999999999,-0.013999999999999999,-0.01,-0.013999999999999999,-0.013999999999999999,-0.006,-0.01,-0.013999999999999999,-0.013999999999999999,-0.013999999999999999,-0.013999999999999999,-0.005,-0.009000000000000001,-0.005,-0.005,-0.013000000000000001,-0.013000000000000001,-0.005,-0.005,-0.005,-0.005,-0.005,-0.005,-0.013000000000000001,-0.009000000000000001,-0.013000000000000001,-0.013000000000000001,-0.004,-0.004,-0.008,-0.004,-0.004,-0.004,-0.004,-0.004,-0.004,-0.004,-0.004,0.0,-0.004,-0.004,-0.004,-0.004,0.003,0.008,0.012,0.012,0.003,0.0,0.012,0.012,0.003,0.012,0.008,0.012,0.003,0.003,0.003,0.003,0.012,0.012,0.003,0.003,0.003,0.012,0.003,-0.004,0.003,0.008,0.0,0.006999999999999999,0.003,0.006999999999999999,0.006999999999999999,0.006999999999999999,0.003,0.006999999999999999,0.006999999999999999,0.003,0.006999999999999999,0.011000000000000001,0.011000000000000001,0.006999999999999999,0.006999999999999999,0.006999999999999999,0.002,0.002,-0.001,0.002,-0.001,-0.001,-0.001,0.002,-0.001,-0.001,-0.001,-0.001,-0.005,-0.001,-0.005,-0.005,-0.01,-0.006,-0.01,-0.006,-0.01,-0.01,-0.006,-0.006,-0.006,-0.006,-0.006,-0.006,-0.006,-0.006,-0.006,-0.002,-0.002,0.001,-0.002,-0.002,-0.002,-0.002,0.001,-0.002,-0.002,-0.006,-0.006,-0.006,-0.006,-0.006,-0.006,-0.006,-0.006,-0.006,0.001,0.001,0.001,-0.001,-0.005,0.002,0.002,-0.001,0.002,0.002,0.002,0.002,-0.005,-0.001,-0.005,-0.001,-0.005,-0.005,-0.005,0.002,0.003,0.003,0.003,0.002,0.003,0.003,0.0,0.006999999999999999,0.006999999999999999,0.0,0.0,0.0,0.0,0.0,0.0,-0.004,0.008,0.008,0.008,0.003,0.012,0.003,0.008,0.004,0.008,0.004,0.004,0.004,0.004,0.004,0.004,-0.003,0.0,-0.003,-0.003,-0.003,-0.003,-0.003,0.004,-0.003,0.004,-0.003,0.004,-0.003,-0.003,0.0,-0.003,-0.002,0.0,0.004,0.004,0.0,-0.002,0.0,0.0,0.0,0.005,0.005,0.0,0.009000000000000001,0.005,0.005,0.005,0.005,-0.006,-0.006,-0.002,-0.002,0.001,0.001,-0.002,0.001,-0.002,-0.006,-0.002,-0.002,-0.002,-0.002,-0.002,-0.002,-0.01,-0.01,-0.006,-0.002,-0.002,-0.01,-0.01,-0.002,-0.01,-0.002,-0.002,-0.002,-0.002,-0.002,0.001,-0.002,-0.002,0.005,-0.002,0.001,-0.002,-0.002,-0.002,-0.002,-0.006,0.001,-0.006,-0.006,-0.006,-0.006,0.006,-0.006,-0.006,0.006,0.006,0.002,0.006,0.002,0.002,0.002,0.002,0.002,0.002,-0.005,0.002,0.002,0.002,-0.005,-0.005,-0.005,-0.005,-0.005,-0.001,0.002,0.002,-0.001,0.006,0.006,-0.001,-0.001,-0.001,-0.001,-0.001,0.006999999999999999,-0.001,0.0,0.003,0.0,0.003,0.003,0.003,0.003,0.003,-0.004,0.0,0.003,0.003,0.003,0.003,0.003,0.0,0.003,-0.004,-0.004,-0.004,-0.004,0.0,0.0,-0.004,0.003,-0.004,0.0,0.003,0.0,0.003,0.003,0.0,0.0,0.0,0.003,0.003,-0.004,0.011000000000000001,0.011000000000000001,-0.004,0.004,0.011000000000000001,0.003,0.004,0.006999999999999999,-0.004,-0.004,-0.004,0.004,0.004,0.004,0.004,0.004,-0.003,0.004,0.004,-0.003,-0.003,0.0,0.0,-0.003,0.0,0.0,0.0,0.0,0.0,-0.008,0.0,0.0,0.0,-0.003,0.0,-0.003,-0.012,-0.008,-0.003,-0.008,-0.008,-0.008,-0.008,-0.008,-0.008,0.0,-0.004,-0.004,-0.004,-0.004,-0.004,0.0,0.003,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.006999999999999999,0.0,0.006999999999999999,0.003,0.0,0.0,-0.001,0.0,-0.001,-0.001,-0.001,-0.001,-0.001,-0.001,-0.001,-0.001,-0.005,-0.001,0.002,0.002,0.002,-0.005,0.002,0.002,-0.005,0.001,0.006,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.005,0.001,0.005,0.005,0.005,0.005,0.0,0.0,0.0,0.0,-0.002,0.0,0.004,0.0,0.0,-0.003,-0.003,0.0,-0.003,-0.003,-0.003,-0.003,0.0,-0.004,-0.004,-0.004,0.0,-0.004,-0.004,0.0,-0.004,-0.004,0.003,-0.004,0.003,-0.004,-0.001,0.002,0.002,0.002,0.002,-0.001,0.002,0.002,0.006,0.001,0.006,0.001,-0.001,-0.002,-0.006,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.0,0.0,0.0,0.0,0.0,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.0,0.008,0.0,0.0,0.0,-0.003,0.0,-0.003,0.0,0.0,0.0,0.003,0.0,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.008,0.0,0.003,0.003,-0.004,-0.004,-0.004,0.0,0.003,-0.004,0.0,0.004,0.004,0.004,0.004,0.004,0.004,0.008,0.0,0.004,0.0,-0.003,-0.003,0.0,0.004,0.004,0.004,-0.002,-0.002,0.0,0.004,0.0,0.0,-0.002,0.001,-0.002,0.005,-0.006999999999999999,-0.003,0.001,0.005,-0.002,-0.011000000000000001,-0.002,-0.002,-0.002,-0.002,-0.002,-0.002,0.006,0.005,-0.002,-0.002,-0.002,-0.002,-0.002,-0.01,-0.006,-0.006,-0.006,-0.001,0.001,-0.006,-0.002,-0.006,0.001,0.001,-0.006,0.001,-0.006,0.001,0.001,0.001,-0.006,0.001,0.001,-0.006,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,-0.002,-0.002,-0.002,0.001,0.005,0.005,0.001,0.001,0.001,0.001,0.001,0.009000000000000001,0.001,0.005,0.005,0.005,0.001,0.005,0.001,0.001,0.009000000000000001,0.009000000000000001,0.001,0.001,0.001,-0.006,0.001,-0.006,0.001,0.001,-0.002,0.001,-0.01,-0.002,0.006,0.006,0.006,0.006,0.006,0.006,0.006,0.002,-0.001,-0.001,-0.001,0.002,-0.001,-0.001,-0.005,-0.001,0.002,-0.001,-0.001,-0.004,-0.004,-0.001,-0.004,-0.004,-0.001,-0.004,-0.008,-0.008,-0.008,-0.004,-0.004,0.0,0.0,0.0,-0.004,0.0,-0.004,0.0,-0.004,0.0,-0.004,-0.004,-0.004,-0.008,-0.008,0.0,-0.008,-0.008,-0.008,0.0,-0.003,-0.003,0.003,0.0,0.0,-0.003,0.0,0.0,0.003,0.0,-0.003,-0.003,0.004,0.004,0.004,0.008,0.008,0.008,-0.008,0.008,0.008,0.008,0.008,0.008,0.0,0.0,0.0,-0.008,0.0,0.0,0.004,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,0.0,0.004,0.004,0.004,0.004,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-0.006999999999999999,-0.003,-0.003,-0.003,0.004,0.004,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.004,0.0,0.0,-0.006999999999999999,0.005,0.009000000000000001,-0.006999999999999999,0.005,0.005,0.005,0.009000000000000001,0.009000000000000001,0.009000000000000001,0.005,-0.006999999999999999,-0.006999999999999999,0.0,-0.002,-0.006,-0.002,-0.002,-0.002};
    //double data [] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
    //Set filter b to have a rolling length of 10 (buffer size) and a scale factor of 7.8125
    HighPassFilter b(10);
    circular_buffer<double> c(10);

    //Fill buffer to start
    for (int i = 0; i<10; i++) {
        c.put(data[i]);
    }

    vector<double> out;

    //Create a vector of outputs
    for (int i = 10; i<22; i++) {
         out.push_back(b.Execute(c));
         c.put(data[i]);
    }

    //Print output
    for (int i = 0; i<12; i++) {
        std::cout << out.at(i) << ",";
    }
    return 1;
}
